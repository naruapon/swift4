import UIKit

class ViewController: UIViewController {
   var button: UIButton!
   var constraintWidth: NSLayoutConstraint!

   override func viewDidLoad() {
      super.viewDidLoad()

      button = UIButton(type: .system)
      button.setTitle("Expand", for: .normal)
      button.backgroundColor = UIColor.lightGray
      button.translatesAutoresizingMaskIntoConstraints = false
      button.addTarget(self, action: #selector(expandButton), for: .touchUpInside)
      view.addSubview(button)

      let constraintButton1 = NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: view, attribute: .top, multiplier: 1, constant: 50)
      let constraintButton2 = NSLayoutConstraint(item: button, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 50)
      let constraintButton3 = NSLayoutConstraint(item: button, attribute: .centerX, relatedBy: .equal, toItem: view, attribute: .centerX, multiplier: 1, constant: 0)
      view.addConstraints([constraintButton1, constraintButton2, constraintButton3])

      constraintWidth = NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 150)
      view.addConstraint(constraintWidth)
   }
   @objc func expandButton() {
      if constraintWidth.constant < 280 {
         button.setTitle("Shrink", for: .normal)
         constraintWidth.constant = 280
      } else {
         button.setTitle("Expand", for: .normal)
         constraintWidth.constant = 150
      }
   }
}